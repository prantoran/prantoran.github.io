<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on Pinku's Adventures</title><link>https://prantoran.github.io/notes/</link><description>Recent content in Notes on Pinku's Adventures</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 08 Jun 2010 08:06:25 +0600</lastBuildDate><atom:link href="https://prantoran.github.io/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://prantoran.github.io/notes/go/basic/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prantoran.github.io/notes/go/basic/introduction/</guid><description> Hello World A sample go program is show here.
package main import &amp;#34;fmt&amp;#34; func main() { message := greetMe(&amp;#34;world&amp;#34;) fmt.Println(message) } func greetMe(name string) string { return &amp;#34;Hello, &amp;#34; + name + &amp;#34;!&amp;#34; } Run the program as below:
$ go run hello.go Variables Normal Declaration:
var msg string msg = &amp;#34;Hello&amp;#34; Shortcut:
msg := &amp;#34;Hello&amp;#34; Constants const Phi = 1.618</description></item><item><title>Basic Types</title><link>https://prantoran.github.io/notes/go/basic/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prantoran.github.io/notes/go/basic/types/</guid><description>Strings str := &amp;#34;Hello&amp;#34; Multiline string
str := `Multiline string` Numbers Typical types
num := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(&amp;#39;a&amp;#39;) // byte (alias for uint8) Other Types
var u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.</description></item><item><title>Curl Snippets</title><link>https://prantoran.github.io/notes/curl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prantoran.github.io/notes/curl/</guid><description>curl https://api.openai.com/v1/chat/completions \ -H &amp;#34;Content-Type: application/json&amp;#34; \ -H &amp;#34;Authorization: Bearer $OPENAI_API_KEY&amp;#34; \ -d &amp;#39;{ &amp;#34;model&amp;#34;: &amp;#34;gpt-3.5-turbo&amp;#34;, &amp;#34;messages&amp;#34;: [ { &amp;#34;role&amp;#34;: &amp;#34;system&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;You are a helpful assistant.&amp;#34; }, { &amp;#34;role&amp;#34;: &amp;#34;user&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;Hello!&amp;#34; } ] }&amp;#39;</description></item><item><title>Flow Control</title><link>https://prantoran.github.io/notes/go/basic/flow-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prantoran.github.io/notes/go/basic/flow-control/</guid><description>Condition if day == &amp;#34;sunday&amp;#34; || day == &amp;#34;saturday&amp;#34; { rest() } else if day == &amp;#34;monday&amp;#34; &amp;amp;&amp;amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(&amp;#34;Uh oh&amp;#34;) Switch switch day { case &amp;#34;sunday&amp;#34;: // cases don&amp;#39;t &amp;#34;fall through&amp;#34; by default! fallthrough case &amp;#34;saturday&amp;#34;: rest() default: work() } Loop for count := 0; count &amp;lt;= 10; count++ { fmt.Println(&amp;#34;My counter is at&amp;#34;, count) } entry := []string{&amp;#34;Jack&amp;#34;,&amp;#34;John&amp;#34;,&amp;#34;Jones&amp;#34;} for i, val := range entry { fmt.</description></item><item><title>File Manipulation</title><link>https://prantoran.github.io/notes/go/advanced/files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prantoran.github.io/notes/go/advanced/files/</guid><description> Condition if day == &amp;#34;sunday&amp;#34; || day == &amp;#34;saturday&amp;#34; { rest() } else if day == &amp;#34;monday&amp;#34; &amp;amp;&amp;amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(&amp;#34;Uh oh&amp;#34;)</description></item><item><title>Angr</title><link>https://prantoran.github.io/notes/cybersecurity/decompilers/angr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prantoran.github.io/notes/cybersecurity/decompilers/angr/</guid><description>Angr Rules:
EagerReturnsSimplifier Adds additional return statements to the decompiled code to improve readabilit of the code, if the number of the &amp;ldquo;in edges&amp;rdquo; for the return node (i.e., in-degree of the return site) is less than a specified threshold Core libraries:
SequenceWalker Used to traverse graphs For each decompiled function, angr constructs a corresponding abstract syntax tree (AST).
When angr modifies the CFG (e.g., applies EagerReturnsSim- plifier), angr calls SequenceWalker to traverse the graph and modify nodes, e.</description></item><item><title>Bash Variables</title><link>https://prantoran.github.io/notes/bash/basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prantoran.github.io/notes/bash/basic/</guid><description> Variable NAME=&amp;#34;John&amp;#34; echo $NAME echo &amp;#34;$NAME&amp;#34; echo &amp;#34;${NAME} Condition if [[ -z &amp;#34;$string&amp;#34; ]]; then echo &amp;#34;String is empty&amp;#34; elif [[ -n &amp;#34;$string&amp;#34; ]]; then echo &amp;#34;String is not empty&amp;#34; fi</description></item><item><title>FoxDec</title><link>https://prantoran.github.io/notes/cybersecurity/decompilers/foxdec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prantoran.github.io/notes/cybersecurity/decompilers/foxdec/</guid><description> FoxDec Freek Verbeek, Pierre Olivier, and Binoy Ravindran. Sound C code decompilation for a subset of x86-64 bi- naries. In Frank S. de Boer and Antonio Cerone, editors, Software Engineering and Formal Methods - 18th In- ternational Conference, SEFM 2020, Amsterdam, The Netherlands, September 14-18, 2020, Proceedings, vol- ume 12310 of Lecture Notes in Computer Science, pages 247â€“264. Springer, 2020.</description></item><item><title>Ghidra</title><link>https://prantoran.github.io/notes/cybersecurity/decompilers/ghidra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prantoran.github.io/notes/cybersecurity/decompilers/ghidra/</guid><description>Ghidra Internally, Ghidra uses debug information, stored in the binary in the DWARF format, from binary to help recover the function prototype of the decompiled function.
For functions with the same name with different argu- ments (i.e., function overloading), compilers store multiple entities in DWARF sections. However, Ghidra may fail to match the correct entity for such a function. Consequently, Ghidra suspends the analysis of this function, which results in its decompiled function lacking arguments, i.</description></item><item><title>Interpreted vs Compiled Languages</title><link>https://prantoran.github.io/notes/programming/interpreted_vs_compiled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prantoran.github.io/notes/programming/interpreted_vs_compiled/</guid><description> Interpreted vs Compiled Interpreted languages
Implement semantics themselves AST-based (recursive) interpreteers Bytecode-interpreters (VM) Compiled languages
Delegate semantics to a traget languages Ahead-f-to,e (AOT) compilers Just-in-time (JIT) compilers AST-transformers (transpilers)</description></item><item><title>TLSH</title><link>https://prantoran.github.io/notes/cybersecurity/tlsh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prantoran.github.io/notes/cybersecurity/tlsh/</guid><description>TLSH Trend Locality Sensitive Hash.
Standard TLSH hash is 70 characters long.
All 3-grams from a sliding window of 5 bytes are used to compute an array of bucket counts, which are used to form the digest body.
Based on the calculation of bucket counts (as calculated above) the three quartiles are calculated (referred to as q1, q2, and q3 respectively).
The digest body is constructed based on the values of the quartiles in the array of bucket counts, using two bits per 128 buckets to construct a 32 byte digest.</description></item></channel></rss>
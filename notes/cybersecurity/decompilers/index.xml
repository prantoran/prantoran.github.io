<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Decompilers on Pinku's Adventures</title><link>https://prantoran.github.io/notes/cybersecurity/decompilers/</link><description>Recent content in Decompilers on Pinku's Adventures</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://prantoran.github.io/notes/cybersecurity/decompilers/index.xml" rel="self" type="application/rss+xml"/><item><title>Angr</title><link>https://prantoran.github.io/notes/cybersecurity/decompilers/angr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prantoran.github.io/notes/cybersecurity/decompilers/angr/</guid><description>Angr Rules:
EagerReturnsSimplifier Adds additional return statements to the decompiled code to improve readabilit of the code, if the number of the &amp;ldquo;in edges&amp;rdquo; for the return node (i.e., in-degree of the return site) is less than a specified threshold Core libraries:
SequenceWalker Used to traverse graphs For each decompiled function, angr constructs a corresponding abstract syntax tree (AST).
When angr modifies the CFG (e.g., applies EagerReturnsSim- plifier), angr calls SequenceWalker to traverse the graph and modify nodes, e.</description></item><item><title>FoxDec</title><link>https://prantoran.github.io/notes/cybersecurity/decompilers/foxdec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prantoran.github.io/notes/cybersecurity/decompilers/foxdec/</guid><description> FoxDec Freek Verbeek, Pierre Olivier, and Binoy Ravindran. Sound C code decompilation for a subset of x86-64 bi- naries. In Frank S. de Boer and Antonio Cerone, editors, Software Engineering and Formal Methods - 18th In- ternational Conference, SEFM 2020, Amsterdam, The Netherlands, September 14-18, 2020, Proceedings, vol- ume 12310 of Lecture Notes in Computer Science, pages 247â€“264. Springer, 2020.</description></item><item><title>Ghidra</title><link>https://prantoran.github.io/notes/cybersecurity/decompilers/ghidra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prantoran.github.io/notes/cybersecurity/decompilers/ghidra/</guid><description>Ghidra Internally, Ghidra uses debug information, stored in the binary in the DWARF format, from binary to help recover the function prototype of the decompiled function.
For functions with the same name with different argu- ments (i.e., function overloading), compilers store multiple entities in DWARF sections. However, Ghidra may fail to match the correct entity for such a function. Consequently, Ghidra suspends the analysis of this function, which results in its decompiled function lacking arguments, i.</description></item></channel></rss>